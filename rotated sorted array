//SERCHING ELEMENT IN ROTATED SORRTED ARRAY



public class Main{
    public static void main(String[] args)
    {int n = 9 ;
    int target = 1;
    
    int[] arr = {7,8,9,1,2,3,4,5,6} ;
    int ans = search(arr , target, n  );
    System.out.println(ans) ;
    
}
static int search(int[] arr , int target , int n  )
{ int s = 0 ; 
int e = n-1 ;
while(s<=e)
{int mid = s+(e-s)/2;
    if(arr[mid] == target){return mid ;}
 if(arr[s]<= arr[mid])
    {if(arr[s]<= target &&  target<=arr[mid])
     {e = mid -1 ;}
     else{ s = mid + 1;}}
else{ 
    if(arr[mid]<= target && target <= arr[e])
    {s = mid + 1 ;}
    else{e = mid - 1;}} }  return -1 ;
     }  }


2.// code :


public class Main {
    public static void main(String[] args) {
        int n = 9;
        int target = 7;
        int[] arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};
        int ans = search(arr, target, n);
        System.out.println(ans);
    }

    static int search(int[] arr, int target, int n) {
        int s = 0;
        int e = n - 1;
        
        while (s <= e) {
            int mid = s + (e - s) / 2;
            
            if (arr[mid] == target) {
                return mid;
            }

            // Check if the left half is sorted
            if (arr[s] <= arr[mid]) {
                // Check if the target is within the left half
                if (arr[s] <= target && target < arr[mid]) {
                    e = mid - 1;
                } else {
                    s = mid + 1;
                }
            }
            // Otherwise, the right half must be sorted
            else {
                // Check if the target is within the right half
                if (arr[mid] < target && target <= arr[e]) {
                    s = mid + 1;
                } else {
                    e = mid - 1;
                }
            }
        }
        
        return -1;  // Target not found
    }
}

    
    
    
    
    
    
    
    
    
